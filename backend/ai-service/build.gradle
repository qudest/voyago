plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.protobuf' version '0.9.4'
	id 'jacoco'
}

group = 'by.smertex'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
	toolVersion = "0.8.11"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	springCloudVersion = "2024.0.1"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springGrpcVersion', "0.5.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.grpc:grpc-services'
	implementation 'org.springframework.grpc:spring-grpc-server-web-spring-boot-starter'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.github.openfeign:feign-httpclient:13.5'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation("com.google.maps:google-maps-services:2.2.0")
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.grpc:spring-grpc-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
	}
}

protobuf {
	protoc {
		artifact = 'com.google.protobuf:protoc'
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java'
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {
				option 'jakarta_omit'
				option '@generated=omit'
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}